# Docker Compose Configuration
# This file defines the services, networks, and volumes for the application's containerized environment.

services:
  # PHP Service
  # Main application container running the Laravel application
  # Handles the PHP-FPM process and application logic
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: api_app
    restart: unless-stopped
    volumes:
      - ./:/var/www
    networks:
      - api_network
    depends_on:
      - db
      - redis
      - nginx

  # Nginx Service
  # Web server handling HTTP requests and serving static files
  # Manages SSL termination and request routing
  nginx:
    image: nginx:alpine
    container_name: api_nginx
    restart: unless-stopped
    ports:
      - "8000:80"
    volumes:
      - ./:/var/www
      - ./docker/nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    networks:
      - api_network

  # MySQL Service
  # Database server for storing application data
  # Provides persistent storage for the application's database
  db:
    image: mysql:8.0
    container_name: api_db
    restart: unless-stopped
    command: --default-authentication-plugin=mysql_native_password
    env_file:
      - .env
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_USER: hasan
      MYSQL_PASSWORD: ${DB_PASSWORD}
      SERVICE_TAGS: dev
      SERVICE_NAME: mysql
    volumes:
      - mysql_data:/var/lib/mysql
    ports:
      - "3306:3306"
    networks:
      - api_network

  # Redis Service
  # In-memory data store for caching and session management
  # Handles application caching and real-time features
  redis:
    image: redis:alpine
    container_name: api_redis
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    networks:
      - api_network

# Network Configuration
networks:
  api_network:
    driver: bridge

# Volume Configuration
volumes:
  mysql_data:
    driver: local